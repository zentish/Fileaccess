<?php
/**
* Fileaccess Module
*
* The Fileaccess module displays and allows for management of
* a file and folder heirarchy on the host computer.
* @author       Craig Nelson <craig@sagestudio.com>
* @link         http://www.sagestudio.com
* @copyright    Copyright (C) 2004-2013 by SageStudio
* @license      http://www.gnu.org/copyleft/gpl.html GNU General Public License
*/
// ----------------------------------------------------------------------
// Based on code from:
// PHP-NUKE Web Portal System - http://phpnuke.org/
// POSTNUKE
// Zikula open Application Framework - http://zikula.org/
// ----------------------------------------------------------------------
// LICENSE
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License (GPL)
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// To read the license please visit http://www.gnu.org/copyleft/gpl.html
// ----------------------------------------------------------------------

class Fileaccess_Controller_Admin extends Zikula_AbstractController
{
	/**
	* the main administration function
	*
	* This function is the default function, and is called whenever the
	* module is called without defining arguments.
	* As such it can be used for a number of things, but most commonly
	* it either just shows the module menu and returns or calls whatever
	* the module designer feels should be the default function (often this
	* is the view() function)
	*
	* @author       The PostNuke Development Team
	* @return       output       The main module admin page.
	*/
	public function postInitialize() {
		$this->view->setCaching(false);
	}

	public function main()
	{
		//	    if (!SecurityUtil::checkPermission( 'Fileaccess::', '::', ACCESS_ADMIN)) {
		//	    	return LogUtil::registerPermissionError();
		//	      //return DataUtil::formatForDisplayHTML(_MODULENOAUTH);
		//	    }
		$this->redirect(ModUtil::url($this->name, 'admin', 'view'));

		//	    // Create output object - this object will store all of our output so that
		//	    // we can return it easily when required
		//	    //$view =& new view('Fileaccess');
		//
		//	    // Return the output that has been generated by this function
		//	    //return $view->fetch('Fileaccess_admin_main.htm');
		//	    return $this->view->fetch('Fileaccess_admin_main.htm');
	}


	/**
	* Modify configuration
	*
	* This is a standard function to modify the configuration parameters of the
	* module
	*
	*/
	public function view()
	{
		// Security check - important to do this as early as possible to avoid
		// potential security holes or just too much wasted processing
		if (!SecurityUtil::checkPermission( 'Fileaccess::', '::', ACCESS_ADMIN)) {
			return LogUtil::registerPermissionError();
			//return DataUtil::formatForDisplayHTML(_MODULENOAUTH);
		}

		$this->view->assign(ModUtil::getVar('Fileaccess'));
		$this->view->assign('php_ini_post_max_size',(ini_get('post_max_size')));
		$this->view->assign('php_ini_upload_max_filesize',(ini_get('upload_max_filesize')));
		$this->view->assign('php_ini_max_file_uploads',(ini_get('max_file_uploads')));
		
		// Return the output that has been generated by this function
		return $this->view->fetch('Fileaccess_admin_modifyconfig.htm');
	}


	/**
	* Update the configuration
	*
	*/
	public function updateconfig()
	{
		// Get parameters from whatever input we need.  All arguments to this
		// function should be obtained from FormUtil::getPassedValue(), getting them
		// from other places such as the environment is not allowed, as that makes
		// assumptions that will not hold in future versions of PostNuke

		// Security check
		if (!SecurityUtil::checkPermission('Files::', '::', ACCESS_ADMIN)) {
			return LogUtil::registerPermissionError();
		}

		$bold=FormUtil::getPassedValue('bold', isset($args['bold']) ? $args['bold'] : 0, 'POST');
		$itemsperbold=FormUtil::getPassedValue('itemsperbold', isset($args['itemsperbold']) ? $args['itemsperbold'] : 0, 'POST');
		$rootdir=FormUtil::getPassedValue('rootdir', isset($args['rootdir']) ? $args['rootdir'] : 0, 'POST');
		$iconfile=FormUtil::getPassedValue('iconfile', isset($args['iconfile']) ? $args['iconfile'] : 0, 'POST');
		$iconfolder=FormUtil::getPassedValue('iconfolder', isset($args['iconfolder']) ? $args['iconfolder'] : 0, 'POST');
		$iconfolderopen=FormUtil::getPassedValue('iconfolderopen', isset($args['iconfolderopen']) ? $args['iconfolderopen'] : 0, 'POST');
		$iconmove=FormUtil::getPassedValue('iconmove', isset($args['iconmove']) ? $args['iconmove'] : 0, 'POST');
		$iconlog=FormUtil::getPassedValue('iconlog', isset($args['iconlog']) ? $args['iconlog'] : 0, 'POST');
		$filemaxsize=FormUtil::getPassedValue('filemaxsize', isset($args['filemaxsize']) ? $args['filemaxsize'] : 0, 'POST');

		// Confirm authorisation code.  This checks that the form had a valid
		// authorisation code attached to it.  If it did not then the function will
		// proceed no further as it is possible that this is an attempt at sending
		// in false data to the system
		//	    if (!SecurityUtil::confirmAuthKey()) {
		//	        SessionUtil::setVar('errormsg', DataUtil::formatForDisplayHTML(_BADAUTHKEY));
		//	        return System::redirect(ModUtil::url('Fileaccess', 'admin', 'view'));
		//	    }

		// Confirm authorisation code
		$this->checkCsrfToken();

		if (empty($bold)) {
			$bold = false;
		}
		ModUtil::setVar('Fileaccess', 'bold', (bool)$bold);

		if (empty($itemsperbold)) {
			$itemsperbold = 3;
		}

		ModUtil::setVar('Fileaccess', 'itemsperbold', $itemsperbold);
		ModUtil::setVar('Fileaccess', 'rootdir', $rootdir);
		ModUtil::setVar('Fileaccess', 'iconfile', $iconfile);
		ModUtil::setVar('Fileaccess', 'iconfolder', $iconfolder);
		ModUtil::setVar('Fileaccess', 'iconfolderopen', $iconfolderopen);
		ModUtil::setVar('Fileaccess', 'iconmove', $iconmove);
		ModUtil::setVar('Fileaccess', 'iconfolderopen', $iconfolderopen);
		ModUtil::setVar('Fileaccess', 'iconlog', $iconlog);
		ModUtil::setVar('Fileaccess', 'filemaxsize', $filemaxsize);

		// the module configuration has been updated successfuly
		SessionUtil::setVar('statusmsg', $this->__('The configuration has been updated'));
		LogUtil::registerStatus($this->__('The configuration has been updated'));

		// Let any other modules know that the modules configuration has been updated
		ModUtil::callHooks('module','updateconfig', 'Fileaccess', array('module' => 'Fileaccess'));

		// This function generated no output, and so now it is complete we redirect
		// the user to an appropriate page for them to carry on their work
		return System::redirect(ModUtil::url('Fileaccess', 'admin', 'view'));
	}
}
?>